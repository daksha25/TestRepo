Promoted Build plugin
Select Promotion option from matrix authorization thing


Whatever things want to do with job do it 


And what to do after promotion add it to promoted the build when …..block


It will ask for promotion




Add user remotely : groovy script


  import hudson.security.*
  import hudson.model.*
//    class java.util.ArrayList
  
    String usertoAdd ="anamika"
    def password ="anamika"
    def job_name="abc";
  	def user = [];
    items = hudson.model.Hudson.instance.items; 
    //to check the user is available or not
    
    def creds = com.cloudbees.plugins.credentials.CredentialsProvider.lookupCredentials(com.cloudbees.plugins.credentials.common.StandardUsernameCredentials.class,Jenkins.instance,null,null);
  	for (c in creds) 
  	{
      def user1=c.username
      user.add(user1)
    //  println(user)
    }
      if(user.contains(usertoAdd))
       {
      println('user available')
  //add user to matrix and assign permissions
         
      AbstractProject proj = Hudson.instance.getItem(job_name)
      AuthorizationMatrixProperty authProperty = proj.getProperty(hudson.security.AuthorizationMatrixProperty)
   
      authProperty.add("hudson.model.Item.Cancel:anamika")
      authProperty.add("hudson.model.Item.Configure:anamika")
      authProperty.add("hudson.model.Item.Move:anamika")
      authProperty.add("hudson.model.Item.Workspace:anamika")
      authProperty.add("com.cloudbees.plugins.credentials.CredentialsProvider.Delete:anamika");
  
    	Map<Permission, Set<String>> permissionMap = authProperty.getGrantedPermissions()
    
        proj.removeProperty(hudson.security.AuthorizationMatrixProperty)
        proj.addProperty(new AuthorizationMatrixProperty(permissionMap))
    
      
    
    }
   else
   {
     //user not available
  println('not_available')
   def instance = Jenkins.getInstance()
  //create user
      def hudsonRealm = new HudsonPrivateSecurityRealm(false)
      hudsonRealm.createAccount(usertoAdd,password)
      instance.setSecurityRealm(hudsonRealm)
      instance.save()
  //add user to matrix and assign permissions
       	AbstractProject proj = Hudson.instance.getItem(job_name)
        AuthorizationMatrixProperty authProperty = proj.getProperty(hudson.security.AuthorizationMatrixProperty)
      
        authProperty.add("hudson.model.Item.Cancel:anamika")
        authProperty.add("hudson.model.Item.Configure:anamika")
        authProperty.add("hudson.model.Item.Move:anamika")
        authProperty.add("hudson.model.Item.Workspace:anamika")
        authProperty.add("com.cloudbees.plugins.credentials.CredentialsProvider.Delete:anamika");
    
      Map<Permission, Set<String>> permissionMap = authProperty.getGrantedPermissions()
      
      proj.removeProperty(hudson.security.AuthorizationMatrixProperty)
      proj.addProperty(new AuthorizationMatrixProperty(permissionMap))
      
          println('done..')
   }
  
  
